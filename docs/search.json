[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Team Datatepe",
    "section": "",
    "text": "This is our project webpage.\nPlease stay tuned to follow our project activities.\n\nTeam Members\n\nYiğit Türkel\nFiruze İpek Yıldırım\nMuhammed Uğur Çubuk\nElif Lorasdağı\nHazan Fakılı\nTutku Altay\n\n\n\nProject Topic\nComprehensive Analysis of Hacettepe University Engineering Faculty (2018-2024)\nThis project focuses on a detailed analysis of the admissions and demographic trends in the Engineering Faculty of Hacettepe University over the period from 2018 to 2024. The analysis covers several key parameters: capasities, valedictorians, gender distribution, the geographical regions from which students originate, and the number of national preferences for the faculty. By examining these aspects, the project aims to highlight shifts in student demographics, changes in gender representation, regional diversity, and the popularity of the faculty across Turkey. The findings will provide valuable insights into the evolution of admission policies and the factors influencing student choices during this period.\n\n\nData Set\n1\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Analysis",
    "section": "",
    "text": "About this site\n\n# Load necessary libraries\n# Gerekli kütüphaneleri yükle\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(scales) # Logaritmik dönüşüm için\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n# Veriyi yükle\ndata &lt;- read_csv(\"ya_veri.csv\")\n\nRows: 105 Columns: 15\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): department\ndbl (14): year, capacity, percentage_women, percentage_men, valedictorian, r...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Veriyi filtrele ve sıralama bilgilerini numeric olarak düzenle\ndata_filtered &lt;- data %&gt;%\n  select(department, year, ranking) %&gt;%\n  filter(!is.na(ranking)) %&gt;%\n  mutate(ranking = as.numeric(ranking))\n\n\nggplot(data=data_filtered, aes(x=year, y=ranking, color=department, group=department)) +\n  geom_line(linewidth=0.6) +  # Thinner lines\n  geom_point(size=1.2) +  # Smaller points\n  scale_y_log10(\n    name=\"Ranking (Base 3 Log, Inverted)\",\n    trans = log_trans(base = 3),  # Base 3 logarithmic scale\n    breaks = c(900, 2700, 8100, 24300, 72900, 218700),  # Base-3 scaled values\n    labels = c(\"900\", \"2.7k\", \"8.1k\", \"24.3k\", \"72.9k\", \"218.7k\")  # Formatted labels\n  ) +\n  coord_cartesian(ylim = rev(range(data_filtered$ranking))) +  # Invert y-axis (upside down)\n  scale_color_manual(\n    values = c(\n      \"Chemical_Eng\" = \"#f70753\", \n      \"Mining_Eng\" = \"#f707eb\", \n      \"Geology_Eng\" = \"#450015\", \n      \"Geomatic_Eng\" = \"#a89200\", \n      \"Enviromental_Eng\" = \"#00a80e\", \n      \"Industrial_Eng\" = \"#004506\", \n      \"AI_Eng\" = \"#333333\", \n      \"Hydrogeology_Eng\" = \"#102457\", \n      \"Physics_Eng\" = \"#0047fa\", \n      \"Computer_Eng\" = \"#fa4700\", \n      \"Mechanical_Eng\" = \"#912fed\", \n      \"Electrical_Electronic_Eng\" = \"#031a73\", \n      \"Food_Eng\" = \"#5778ff\", \n      \"Civil_Eng\" = \"#ff57e9\", \n      \"Nuclear_Energy_Eng\" = \"#149e08\",\n      \"Other\" = \"#c2501b\"  # Default color for additional departments\n    )\n  ) +\n  labs(\n    title=\"Department Rankings Over the Years (Base 3 Logarithmic Scale, Inverted Y-Axis)\",\n    x=\"Years\",\n    y=\"Ranking\"\n  ) +\n  theme_minimal(base_size = 10) +  # Compact theme\n  theme(\n    legend.position=\"bottom\",  # Legend below the graph\n    legend.title=element_text(size=8),  # Smaller legend title\n    legend.text=element_text(size=6),  # Smaller legend labels\n    legend.key.size=unit(0.4, \"cm\"),  # Smaller legend keys\n    legend.box = \"horizontal\",  # Horizontal legend layout\n    legend.spacing.x = unit(0.1, \"cm\"),  # Reduce legend spacing\n    axis.text.x=element_text(size=8, angle=45, hjust=1),  # Smaller x-axis labels\n    axis.text.y=element_text(size=8),  # Smaller y-axis labels\n    axis.title=element_text(size=9),  # Smaller axis titles\n    plot.title=element_text(size=12, face=\"bold\", hjust=0.5),  # Compact title\n    plot.margin = margin(5, 5, 5, 5)  # Reduce plot margins\n  ) +\n  scale_x_continuous(breaks = unique(data_filtered$year))  # Ensure all years are shown\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Your Title",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Load the dataset\ndata &lt;- read_csv(\"ya_veri.csv\")\n\nRows: 105 Columns: 15\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): department\ndbl (14): year, capacity, percentage_women, percentage_men, valedictorian, r...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Filter out 2018 data\ndata &lt;- filter(data, year != 2018)\n\n# Function to plot gender distribution\nplot_gender_distribution &lt;- function(department_name) {\n  department_data &lt;- filter(data, department == department_name)\n  \n  # Define y-axis limits based on department\n  y_limits &lt;- if (department_name == \"Computer_Eng\") {\n    c(0, 140)\n  } else {\n    c(0, 110)\n  }\n  \n  ggplot(department_data) +\n    geom_bar(aes(x = factor(year), y = capacity, fill = \"Men\"), stat = \"identity\", position = \"stack\") +\n    geom_bar(aes(x = factor(year), y = capacity * (percentage_women / 100), fill = \"Women\"), stat = \"identity\", position = \"stack\") +\n    geom_line(aes(x = factor(year), y = valedictorian * 11, group = 1), color = \"purple\", linewidth = 0.75) +\n    geom_point(aes(x = factor(year), y = valedictorian * 11), color = \"purple\", size = 2) +\n    geom_text(aes(x = factor(year), y = capacity, label = paste0(percentage_men, \"%\")), \n              vjust = -0.5, color = \"pink\", size = 3, fontface = \"bold\") +\n    geom_text(aes(x = factor(year), y = capacity * (percentage_women / 100), label = paste0(percentage_women, \"%\")), \n              vjust = 1.5, color = \"navy\", size = 3, fontface = \"bold\") +\n    geom_text(aes(x = factor(year), y = valedictorian * 11, label = valedictorian), \n              color = \"purple\", size = 3, fontface = \"bold\", vjust = -1.5, hjust = 0.5) +\n    scale_y_continuous(name = \"Capacity\", limits = y_limits, breaks = seq(y_limits[1], y_limits[2], by = 10),\n                       sec.axis = sec_axis(~ . / 11, name = \"Valedictorians\", breaks = seq(1, 10, by = 1))) +\n    labs(title = department_name, x = \"Year\", fill = \"Gender\") +\n    scale_fill_manual(values = c(\"Women\" = \"pink\", \"Men\" = \"navy\")) +\n    theme_minimal() +\n    theme(plot.title = element_text(hjust = 0.5, size = 12),\n          axis.text.x = element_text(angle = 45, hjust = 1, size = 10),\n          axis.text.y = element_text(size = 10),\n          axis.text.y.right = element_text(color = \"purple\", size = 10),\n          axis.title.y.right = element_text(color = \"purple\", size = 12))\n}\n\n# List of departments\ndepartments &lt;- unique(data$department)\n\n# Create and print plots in a single column\nfor (dept in departments) {\n  print(plot_gender_distribution(dept))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  }
]